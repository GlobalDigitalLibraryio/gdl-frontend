// @flow
const withTM = require('@weco/next-plugin-transpile-modules');
const WorkboxPlugin = require('workbox-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
// Add source maps in production for Sentry
const withSourceMaps = require('@zeit/next-source-maps');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');

const ManifestTransform = require('./manifestTransform');
const { serverRuntimeConfig, publicRuntimeConfig } = require('./config');
const { ANALYZE } = process.env;

// See https://developers.google.com/web/tools/workbox/modules/workbox-build
const workboxOpts = {
  swSrc: 'service-worker.js'
};

const nextConfig = {
  serverRuntimeConfig,
  publicRuntimeConfig,
  transpileModules: ['gdl-auth', 'gdl-image'],
  webpack(config, options) {
    // If we are running in dev mode, add a dummy service worker
    if (options.dev) {
      config.plugins.push(
        new CopyWebpackPlugin([
          { from: 'service-worker-dev.js', to: 'service-worker.js' }
        ])
      );
      // Generate the workbox service worker (for the client build only)
    } else if (!options.isServer) {
      config.plugins.push(
        new WorkboxPlugin.InjectManifest(workboxOpts),
        // Custom webpack plugin to transform the precache manifest generated by workbox
        new ManifestTransform({ buildId: options.buildId })
      );
    }

    if (ANALYZE) {
      config.plugins.push(
        new BundleAnalyzerPlugin({
          analyzerMode: 'server',
          analyzerPort: options.isServer ? 8888 : 8889,
          openAnalyzer: true
        })
      );
    }

    return config;
  }
};

module.exports = withSourceMaps(withTM(nextConfig));
